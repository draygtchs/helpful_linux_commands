These are my notes for myself for connecting to gihub headlessly. 
I do this when I set up a headless raspberry pi with the desktop disabled.

After connected to the pi, you will need to do several things:
- create the repo on github.com and include a README.md
- on pi set global user email and user name
- generate ssh keys on the pi
- add ssh public key to github SSH and GPG keys list
- authenticate you public key in pi
- initiate git in the directory on the pi *set the branch to 'main'*
- set remote origin
- create a .gitignore file
- git add > git commit > git push

Create the repo on github.com
I would definitely create the repo on github.com first 
and check the box to include a README.md, even if you don't need it.
It is difficult to create a repo from the terminal, and pretty simple on github.com.
Adding the README.md helps several aspects, and it creates the project with a file.
If you start a project without a file, when you push you will have changes to the repo.
Having changes when you push helps git and github to have changes to update.

On pi set global user email and user name
Run these commands to set global git variables;
    git config --global user.name "Your User Name"
    git config --global user.email "your.email@example.com"
To see the variables, run:
    git config --global --list

Generate ssh keys on the pi
You will need to generate ssh keys on the pi,
so you will have a public key for authentication of your privileges.
Run this command (I think it should be from the home directory.):
    ssh-keygen -t rsa -C "your.email@example.com"
Then run this command to find your keys:
    cd ~/.ssh
Copy the key from id_rsa.pub (include the 'ssh-rsa', don't include the '= your.email@example.com')

Add ssh public key to github SSH and GPG keys list
On github.com, sign into your account.
Go to Settings under your account icon on the top left of the page.
Go to SSH and GPG keys, and add a 'New SSH key'.
Paste in the public key you copied from id_rsa.pub
Pasting can be a challenge, you will need to delete some of the spaces.
Just keep trying and adjusting until github.com accepts it. 

Authenticate you public key in pi
This set basically 'signs you in' with github. 
You need to repeat this command each time you begin a programming session.
Go back to your pi and run:
ssh -T git@github.com
This should result with 'Hi username! You've successfully authenticated, but GitHub does not provide shell access.'

Initiate git in the directory on the pi
To start using git in you project, initiate git in your directory
cd into your directory then run:
    git init -b main
This will start git and name the branch 'main'.
The default git branch name is 'master', but github's primary is 'main'. 
So always name your primary git branch 'main' to avoid issues.
You can also start other branches by running: git init -b <desired_branch_name>
You should also be able to change the default git branch to 'main' by running:
    git config --global init.defaultBranch main

Set remote origin
Now you need to connect your git repo to your github repo.
Still in your project directory, run:
    git remote set-url origin git@github.com:username/repo_name.git
This should connect everything together.  

Create a .gitignore file
Before you push your git repo to github, you should create a .gitignore file.
Any directories or files that are listed in this file will not be pushed to github.
This is especially important if you set up a virtual environment for your project.
If you push a venv (virtual environment) it will send thousands of files to your github repo.
Create your .gitignore file in your project directory:
    touch .gitignore
Then use nano to add anything that you don't want to push.
To add venv to .gitignore, add these lines:
    venv/
    .venv/

Now git add > git commit > git push
You should now be ready to run git commands
To stage files to be committed, run:
    git add .
(the . stages all files in the git repo)
To create a commit, run:
    git commit -m 'Message to go with commit'
To push to the main branch, run:
    git push origin main
To update your git repo from the github repo, run:
    git fetch
or git fetch main
